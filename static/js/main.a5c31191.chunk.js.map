{"version":3,"sources":["comps/Header.tsx","comps/Footer.tsx","comps/useWeather.ts","comps/SetWeather.jsx","comps/Weather.jsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["props","className","text","useWeather","city","useState","weather","setWeather","url","useEffect","a","fetch","response","json","data","effect","SetWeather","main","description","feels_like","temp","temp_min","temp_max","Weather","cityInput","setCity","onChange","event","_city","target","value","onClick","App","Header","Footer","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kNAIe,WAACA,GACZ,OACA,qBAAKC,UAAY,SAAjB,SACI,6BAAKD,EAAME,UCJJ,aACX,OACA,qBAAKD,UAAY,Y,8BCiBNE,EApBI,SAACC,GAAiB,IAAD,EAEFC,mBAAS,MAFP,mBAEzBC,EAFyB,KAEhBC,EAFgB,KAG5BC,EAAM,oDAAsDJ,EAAO,yDAcvE,OAZAK,qBAAU,YAEM,uCAAG,8BAAAC,EAAA,sEAEYC,MAAMH,GAFlB,cAELI,EAFK,gBAGQA,EAASC,OAHjB,OAGLC,EAHK,OAKXP,EADaO,GAJF,2CAAH,qDAOZC,KACD,CAACX,IAEE,CAACE,YCSIU,EAzBK,SAACZ,GAAU,IAEpBE,EAAWH,EAAWC,GAAtBE,QACP,OAAGF,EACQ,8BACLE,EACF,gCACA,uBACA,6BAAKF,IACL,6BAAKE,EAAQA,QAAQ,GAAGW,OACxB,6BAAKX,EAAQA,QAAQ,GAAGY,cACxB,8CAAiBZ,EAAQW,KAAKE,WAA9B,UACA,4CAAeb,EAAQW,KAAKG,QAC5B,oCAAOd,EAAQW,KAAKI,SAApB,UAAkCf,EAAQW,KAAKK,SAA/C,UACA,0BATa,mDAab,GCKOC,EArBC,SAACvB,GAEb,IAAIwB,EAAY,GAFO,EAICnB,mBAAS,aAJV,mBAIhBD,EAJgB,KAIVqB,EAJU,KAWvB,OAAO,sBAAKxB,UAAU,UAAf,UAEF,uBAAOyB,SAAU,SAAAC,GAAK,OAPTC,EAOwBD,EAAME,OAAOC,WANnDN,EAAYI,GADC,IAACA,KAQd,wBAAQG,QAAS,kBAAMN,EAAQD,IAA/B,gBACCR,EAAWZ,OCCL4B,EAZH,WACV,OACE,gCAEE,cAACC,EAAD,CAAQ/B,KAAK,YAEb,cAAC,EAAD,CAASE,KAAK,cACd,cAAC8B,EAAD,QCFSC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.a5c31191.chunk.js","sourcesContent":["import { isExportSpecifier } from \"typescript\";\nimport React from 'react'\nimport './comp.css'\n\nexport default (props:any) => {\n    return(\n    <div className = \"Header\">\n        <h1>{props.text}</h1>\n        \n    </div>\n\n    )\n}","import React from 'react';\nimport './comp.css'\n\nexport default () => {\n    return(\n    <div className = \"Footer\">\n        \n    </div>\n\n    )}\n    ","import React, {useEffect, useState} from \"react\";\n\nconst useWeather = (city:string) => {\n\n    const [weather, setWeather] = useState(null);\n    var url = \"http://api.openweathermap.org/data/2.5/weather?q=\" + city + \"&units=imperial&appid=94219ab88ca9c0a2e0626c2db4014722\"\n\n    useEffect(() => {\n\n        const effect = async () => {\n            // await mean that the program waits untill it gives a resopnse.\n            const response = await fetch(url); // first you fetch the url\n            const data = await response.json(); // then you get the json output of the API\n            const item = data; // So you can destructure\n            setWeather(item); // Set the state varable.\n        }\n        effect();\n    }, [city]);\n\n    return{weather} // Return data\n}\n\nexport default useWeather;","import React from 'react';\nimport useWeather from './useWeather'\n\nconst SetWeather  = (city) => {\n    \n    const {weather} = useWeather(city);\n    if(city) {\n        return(<div>\n        {!weather ? (<h3>loading...</h3>) : ( // null check\n        <div>\n        <br/>\n        <h1>{city}</h1> \n        <h2>{weather.weather[0].main}</h2>\n        <h3>{weather.weather[0].description}</h3>\n        <h1>Feels Like: {weather.main.feels_like}°</h1>\n        <h2>Actually: {weather.main.temp}</h2>\n        <h3>L:{weather.main.temp_min}° H:{weather.main.temp_max}°</h3>\n        <br></br>\n        </div>)}\n    </div>)\n    } else {\n        return;\n    }\n     \n\n\n}\n\nexport default SetWeather;","import useWeather from './useWeather'\nimport './comp.css'\nimport SetWeather from './SetWeather.jsx'\nimport React, {useEffect, useState} from \"react\";\n\nconst Weather = (props) => {\n\n    var cityInput = \"\";\n\n    const [city, setCity] = useState(\"Las Vegas\");\n\n    let ChangeCity = (_city) => {\n        cityInput = _city;\n    }\n    \n\n    return(<div className=\"weather\">\n\n         <input onChange={event => ChangeCity(event.target.value)}></input>\n        <button onClick={() => setCity(cityInput)}>OK</button>\n        {SetWeather(city)}\n        \n    </div>)\n    \n}\n\nexport default Weather;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Header from './comps/Header';\nimport Footer from './comps/Footer';\nimport Weather from './comps/Weather.jsx';\nimport SetWeather from './comps/SetWeather';\n\n\nconst App = () => {\n  return (\n    <div>\n      \n      <Header text=\"Weather\"/>\n      \n      <Weather city=\"Las Vegas\"/>\n      <Footer/>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}